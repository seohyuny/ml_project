{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5bdf8d1-ec7e-4b38-a104-4ba1ede6caa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "def preprocess_data(df):\n",
    "    col = df.columns.tolist()\n",
    "    col = [i.replace(' ','') for i in col]\n",
    "    df = df[col]\n",
    "\n",
    "    # ... (전처리 코드 추가)\n",
    "\n",
    "    return df\n",
    "\n",
    "def main():\n",
    "    df_adu = pd.read_csv('samadult.csv')\n",
    "    df_family = pd.read_csv('familyxx.csv')\n",
    "    df_household = pd.read_csv('househld.csv', index_col='HHX')\n",
    "\n",
    "    # df_adu와 df_family를 HHX와 FMX 기준으로 inner join\n",
    "    merged_df = pd.merge(df_adu, df_family, how='inner', on=['HHX', 'FMX'])\n",
    "\n",
    "    # df_household와 merged_df를 HHX 기준으로 inner join\n",
    "    df = pd.merge(df_household, merged_df, how='inner', on='HHX')\n",
    "\n",
    "    df_col = pd.read_excel('분석변수_총정리.xls')\n",
    "    col = df_col['Unnamed: 0'].tolist()\n",
    "    col = [i.replace(' ','') for i in col]\n",
    "    df = df[col]\n",
    "    col_list = df_col['Unnamed: 2'].tolist()\n",
    "    df.columns = col_list\n",
    "    df = df[~df['당뇨유무'].isin([3, 7, 9])]\n",
    "    df['응답한 가구 내 아동의 수는 몇 명?'] = df['응답한 가구 내 아동의 수는 몇 명?'].fillna(round(df_household.mean()))\n",
    "    df['응답한 가구 내 사람의 수는 몇 명?'] = df['응답한 가구 내 사람의 수는 몇 명?'].fillna(round(df_household.mean()))\n",
    "    df.fillna(0, inplace=True)\n",
    "    col_exclude = ['체질량지수', '나이', '결혼여부']\n",
    "    for column in df.columns:\n",
    "        if column not in col_exclude:\n",
    "            df.loc[df[column].isin([3, 7, 8, 9, 996,997,998,999]), column] = 0\n",
    "    df.loc[df['체질량지수'] >= 7000, '체질량지수'] = 0\n",
    "    df.loc[df['체질량지수'] >= 4000, '당뇨유무'] = 1\n",
    "    df['신체활동빈도'] = df['신체활동빈도'].apply(lambda x: round(x / 4) if 10 <= x < 50 else round(x / 48) if x >= 50 else x)\n",
    "    df.loc[df['의료비지출에 대한 인식'].isin([1,2]), '의료비지출에 대한 인식']= 1\n",
    "    df.loc[df['의료비지출에 대한 인식'].isin([3,4]), '의료비지출에 대한 인식']= 2\n",
    "\n",
    "    df.loc[df['결혼여부'].isin([1,2,3]), '결혼여부']= 1\n",
    "    df.loc[df['결혼여부'].isin([4,5,6,7,8,9]), '결혼여부']= 2\n",
    "\n",
    "    col_1 = ['체질량지수', '신체활동빈도', '나이', '응답한 가구 내 아동의 수는 몇 명?', '응답한 가구 내 사람의 수는 몇 명?']\n",
    "\n",
    "    col_2 = ['고혈압유무', '현재 임신여부', '우울증 여부', '체중문제', '알콜 및 약물 남용',\n",
    "                    '수술 후유증', '신체노화', '피로무기력증', '흡연유무', '1년내 음주경험',\n",
    "                    '고지혈증없음', '보통 아플 때 가는 곳', '의료비지출에 대한 인식',\n",
    "                    '인터넷 건강정보 검색유무 1년내', 'sex', '결혼여부',\n",
    "                    '균형 잡힌 식사를 할 여유가 없었습니다']\n",
    "\n",
    "    df_encoded = pd.get_dummies(df, columns=col_2)\n",
    "\n",
    "    df_encoded[col_1] = df[col_1]\n",
    "\n",
    "    df_encoded['당뇨유무'] = df['당뇨유무']\n",
    "    df_encoded = df_encoded.loc[:, ~df_encoded.columns.str.endswith('_0.0') & ~df_encoded.columns.str.endswith('_0')]\n",
    "    df = df_encoded\n",
    "    df_1 = df[df['당뇨유무'] == 1]\n",
    "    df_2 = df[df['당뇨유무'] == 2]\n",
    "\n",
    "    df_2_1 = df_2.iloc[0:3786]\n",
    "    df_2_2 = df_2.iloc[3786:7572]\n",
    "    df_2_3 = df_2.iloc[7572:11358]\n",
    "    df_2_4 = df_2.iloc[11358:15144]\n",
    "    df_2_5 = df_2.iloc[15144:18930]\n",
    "    df_2_6 = df_2.iloc[18930:20869]\n",
    "\n",
    "    df_01 = pd.concat([df_1, df_2_1], axis=0)\n",
    "    df_02 = pd.concat([df_1, df_2_2], axis=0)\n",
    "    df_03 = pd.concat([df_1, df_2_3], axis=0)\n",
    "    df_04 = pd.concat([df_1, df_2_4], axis=0)\n",
    "    df_05 = pd.concat([df_1, df_2_5], axis=0)\n",
    "    df_06 = pd.concat([df_1, df_2_6], axis=0)\n",
    "    dfs = [df_01, df_02, df_03, df_04, df_05, df_06]\n",
    "\n",
    "    for idx, df in enumerate(dfs, start=1):\n",
    "        print(f\"Processing DataFrame {idx}\")\n",
    "\n",
    "        # 레이블과 특성을 나누기\n",
    "        X = df.drop('당뇨유무', axis=1)\n",
    "        y = df['당뇨유무']\n",
    "\n",
    "        # 학습 및 테스트 데이터 나누기\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "        # 스케일링 적용\n",
    "        scaler = StandardScaler()\n",
    "        X_train[col_1] = scaler.fit_transform(X_train[col_1])\n",
    "        X_test[col_1] = scaler.transform(X_test[col_1])\n",
    "\n",
    "        # 데이터를 합쳐서 CSV 파일로 저장\n",
    "        train_data = pd.concat([X_train, y_train], axis=1)\n",
    "        test_data = pd.concat([X_test, y_test], axis=1)\n",
    "\n",
    "        train_data.to_csv(f'train_data_{idx}.csv', index=False)\n",
    "        test_data.to_csv(f'test_data_{idx}.csv', index=False)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    preprocessing.main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
